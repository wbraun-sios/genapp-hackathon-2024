#!/usr/bin/perl
#
# Name: recover 
#
# Description:  The recover script is responsible for recovering the msql
#				daemons
#
# Arguments:
#   -t tag - LifeKeeper resource tag name
#   -i id - LifeKeeper resource internal identifier
#
#
# Outputs:
#	0 - success
#	1 - failure
#
#
# This software is provided "as is" without warranty of any kind, either
# expressed or implied, including, but not limited to, the implied
# warranties of merchantability and fitness for a particular task.
#
################### LifeKeeper Linux Change Log ############################
#
# MR/CR          date        user    description
# =====          ====        ====    ===========

use Getopt::Std; # use the standard getopt package
use strict;
use vars qw( $opt_t $opt_i ); 

require '/etc/default/LifeKeeper.pl';
my $lkroot=$ENV{LKROOT};
my $bindir;
my $conffile;
my $debug;
my $ret;
my $versionret;
my $info;
my $null="/dev/null";
my $pid;
chomp (my $sys=`$lkroot/bin/lcduname 2>$null`);
getopts('t:i:');
my $tag = "$opt_t";
my $id = "$opt_i";
if ($tag eq '' || $id eq '' ){
	LKlog( "Unable to get the tag or id for the resource instance");
	($debug) && LKlog( "tag:$tag:");
	($debug) && LKlog( "id:$id:");
	exit 1;
}

# get info from info field of gen/app resource
chomp ($info=`$lkroot/bin/ins_list -t $tag -f: 2>$null|cut -f6 -d: 2>$null`);
($bindir,$conffile)=split (/\s+/,$info);

# validate info field values
if (! -d $bindir || ! -f $conffile ){
	LKlog( "Unable to get valid values from the info field");
	($debug ) && LKlog( "bindir:$bindir");
	($debug ) && LKlog( "conffile:$conffile");
	exit 1;
}

sub start_msql3d {
	system ("$bindir/msqladmin -f $conffile version >$null 2>&1 ");
$versionret=$?;
	if ($versionret == 0){
		LKlog( "msql3d is already running");
		return;
	}
system ("$bindir/msqladmin -f $conffile shutdown >$null 2>&1");
$ret=$?;
if ($ret){
		LKlog( "Unable to stop msql3d");
exit 1;
	}
	system ("$bindir/msql3d -f $conffile >$null 2>&1 &");
	sleep 5; # Add a short delay
	$ret=$?;
	if ($ret){
		LKlog( "Failed to start msql3d");
		exit 1;
	}
}

sub stop_msql3d {
	system ("$bindir/msqladmin -f $conffile shutdown >$null 2>&1");
	$ret=$?;
	if ($ret){
		LKlog( "Unable to stop msql3d");
		exit 1;
	}
}

# check if msql3d is running after the startup attempt
system ("$bindir/msqladmin -f $conffile version >$null 2>&1 ");
$versionret=$?;
if ($versionret == 0){
	LKlog( "msql3d is already running");
	return;
}

# start msql3d
start_msql3d();


sub getpidfile {
	my $cnf=shift;
	my $null="/dev/null";
	my $directive="Pid_File";
	my @pidfile;
	chomp (@pidfile=grep /^$directive\s+/,`cat $cnf 2>$null`); 
	$pidfile[0] =~ s/^$directive\s+=\s+(.*\.pid).*/$1/g;
	if ( -f "$pidfile[0]" ){
		return $pidfile[0];
	}
	return undef;
}

sub getpid {
	my $conf=shift;
	my $pidfile;
	my $null="/dev/null";
	my $pid;
	$pidfile=getpidfile($conf);
	if (! -f "$pidfile" ){ return undef; }
	chomp ($pid=`head -1 $pidfile 2>$null`);
	if ($pid != 0 && $pid != 1 ){
		system ("ps --no-headers -p $pid >$null");
		($?) && return undef;
		return $pid;
	}
	return undef;
}
